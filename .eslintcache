[{"/Users/pooja/Desktop/projects/dashboard/src/reportWebVitals.js":"1","/Users/pooja/Desktop/projects/dashboard/src/component/index.js":"2","/Users/pooja/Desktop/projects/dashboard/src/App.js":"3","/Users/pooja/Desktop/projects/dashboard/src/index.js":"4","/Users/pooja/Desktop/projects/dashboard/src/component/chart.js":"5","/Users/pooja/Desktop/projects/dashboard/src/component/tile.js":"6","/Users/pooja/Desktop/projects/dashboard/src/component/navbar.js":"7","/Users/pooja/Desktop/projects/dashboard/src/component/data.js":"8","/Users/pooja/Desktop/projects/dashboard/src/component/TopOrders.js":"9","/Users/pooja/Desktop/projects/dashboard/src/component/TopUser.js":"10","/Users/pooja/Desktop/projects/dashboard/src/component/DetailReport.js":"11","/Users/pooja/Desktop/projects/dashboard/src/component/footer.js":"12"},{"size":362,"mtime":1607625456315,"results":"13","hashOfConfig":"14"},{"size":2047,"mtime":1607846905548,"results":"15","hashOfConfig":"14"},{"size":280,"mtime":1607840376539,"results":"16","hashOfConfig":"14"},{"size":547,"mtime":1607683894537,"results":"17","hashOfConfig":"14"},{"size":2080,"mtime":1607727802729,"results":"18","hashOfConfig":"14"},{"size":6207,"mtime":1607847602653,"results":"19","hashOfConfig":"14"},{"size":867,"mtime":1607727841375,"results":"20","hashOfConfig":"14"},{"size":10883,"mtime":1607729395484,"results":"21","hashOfConfig":"14"},{"size":2946,"mtime":1607846756175,"results":"22","hashOfConfig":"14"},{"size":2958,"mtime":1607846787735,"results":"23","hashOfConfig":"14"},{"size":5416,"mtime":1607846137744,"results":"24","hashOfConfig":"14"},{"size":329,"mtime":1607846828909,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1i0zin4",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/pooja/Desktop/projects/dashboard/src/reportWebVitals.js",[],["61","62"],"/Users/pooja/Desktop/projects/dashboard/src/component/index.js",["63"],"import React from 'react';\nimport Tile from './tile';\nimport NavBar from './navbar';\nimport Chart from './chart';\nimport {orders, region, users} from './data';\nimport DenseTable from './TopOrders';\nimport TopUser from './TopUser';\nimport Footer from './footer'\nimport DetailReport from './DetailReport'\n\nclass Dashbord extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            Region : region[0],\n            order : orders.Region1.order,\n            AllOrder : orders\n        }\n    }\n\n     fetchRegionData = (region) => {\n        let order, user\n\n        for(let x in orders) {\n            // console.log(x);\n            if( orders[x].city == region ) {\n                order = orders[x];\n                user = users[region];\n                break;\n            } \n        }\n\n        return {order,user}\n\n    }\n\n     switchRegion = ( reg ) => {\n        // console.log(reg);\n        const orderDetail = this.fetchRegionData(reg);\n        \n        this.setState({\n            Region : reg,\n            order : orderDetail.order.order\n        });\n    }\n\n    componentDidMount() {\n        this.switchRegion(this.state.Region);\n    }\n    \n\n    render() {\n        return (\n            <>\n                <NavBar region = {this.state.Region} switchRegion = {this.switchRegion} allRegion = {region} />\n                     <h1>{this.state.Region}</h1>\n\n                <Tile order = {this.state.order} />\n                < Chart order = {this.state.order} />\n\n                  <br />\n                < DenseTable order = {this.state.order} task = 'd' value = {\"Top\"}  />\n\n                <br />\n                < DenseTable order = {this.state.order} task = 'a' value = {\"Bottom\"} />\n\n                <br />\n                <TopUser task = 'd' value = {\"Top\"} />\n\n                <br />\n                <TopUser task = 'a' value = {\"Bottom\"}  />\n                <br />\n                <DetailReport  />\n            \n            <Footer/>\n            </>\n            \n        );\n\n    }\n\n}\n\nexport default Dashbord;\n",["64","65"],"/Users/pooja/Desktop/projects/dashboard/src/App.js",["66"],"import logo from './logo.svg';\nimport './App.css';\nimport Dashbord from './component/index'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">    \n    < Dashbord />\n    \n    </div>\n  );\n }\n\nexport default App;\n","/Users/pooja/Desktop/projects/dashboard/src/index.js",[],["67","68"],"/Users/pooja/Desktop/projects/dashboard/src/component/chart.js",["69","70","71"],"import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst getLabels = (day, month, year) => {\n\n    let label = [];\n\n    for(let i=0; i<7; i++) {\n\n        label.push(`${day}-${month}-${year}`)\n\n        if(!( day - 1 > 0 )) {\n            day = 31;\n            month = month-1;\n        }\n        day--;\n    }\n\n    return label;\n} \n\nconst OneWeek = (date, month, year, orders) => {\n    let orderCount = [];\n    const enddate = (date>7 ? date-7 : false )\n   \n    if(!enddate) {\n        enddate = 1;\n    }\n\n    for(let x in orders) {\n        const orderDate = orders[x].date.split('-');\n            if( (orderDate[2] == year) && ( (orderDate[0] >= enddate && orderDate[0] <=date && orderDate[1] ==month)   ) ) {\n               // console.log( 'one week ' + orderDate, orders[x]);\n                orderCount.push(orders[x]);\n            }\n    }\n    return (orderCount.length > 0 ? orderCount : false);\n}\n\n\nconst setData = (label, order) => {\n    let dataArray = new Array(7);\n    dataArray.fill(0);\n\n    for(let i in order) {\n        let index = order[i].date;\n        let value = label.indexOf(index)\n        dataArray[value] = order[i].orderAmount ;\n    }\n\n    return dataArray;\n}\n\n\nconst Chart = ( Props ) => {\n\n    console.log('Chart '+ Props.order)\n    const date = new Date();\n    const order = 'order';\n    const month = date.getMonth()+1;\n    const year = date.getFullYear();\n    const day = date.getDate();\t\n    const label = getLabels(day, month, year );\n    const oneWeek = OneWeek(day, month, year, Props[order]);\n    const dataSet = setData(label, oneWeek);\n\n\n\n    const data = {\n        labels : label.reverse(),\n        datasets : [\n            {\n                label : 'Order Amount',\n                data : dataSet,\n                backgroundColor: 'transparent',\n                borderColor : 'Pink',\n                pointBackgroundColor : 'Black',\n            }\n        ]\n    }\n\n\n    return (\n        <div className = \"container\">\n            <h3>Daily Order Trend</h3>\n            < Line data = {data} />\n        </div>\n    )\n}\n\nexport default Chart;","/Users/pooja/Desktop/projects/dashboard/src/component/tile.js",["72","73","74","75","76","77","78","79"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid , Card, Container, Typography, CardContent } from '@material-ui/core';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: '180vh',\n        minHeight : '25vh',\n        backgroundColor : theme.palette.grey[200],\n        paddingTop : theme.spacing(5),\n        marginBottom : theme.spacing(4)\n      }\n  }));\n\n    const oneDayOrder = (day, month, year, orders) => {\n        let orderCount = [];\n        for(let x in orders) {\n            const orderDate = orders[x].date.split('-');\n                if(orderDate[0] == day && orderDate[1] == month && orderDate[2] == year ) {\n                   // console.log('one day ' +orderDate, orders[x]);\n                    orderCount.push(orders[x]);\n                }\n        }\n        return (orderCount.length > 0 ? orderCount : false);\n    }\n\n    const oneMonthOrder = (month, year, orders) => {\n        let orderCount = [];\n        for(let x in orders) {\n            const orderDate = orders[x].date.split('-');\n                if(orderDate[1] == month && orderDate[2] == year ) {\n                   // console.log('one month ' +orderDate, orders[x]);\n                    orderCount.push(orders[x]);\n                }\n        }\n        return (orderCount.length > 0 ? orderCount : false);\n    }\n\n    const oneWeek = (date, month, year, orders) => {\n        let orderCount = [];\n        const enddate = (date>7 ? date-7 : false )\n       \n        if(!enddate) {\n            enddate = 1;\n        }\n\n        for(let x in orders) {\n            const orderDate = orders[x].date.split('-');\n                if( (orderDate[2] == year) && ( (orderDate[0] >= enddate && orderDate[0] <=date && orderDate[1] ==month)   ) ) {\n                   // console.log( 'one week ' + orderDate, orders[x]);\n                    orderCount.push(orders[x]);\n                }\n        }\n        return (orderCount.length > 0 ? orderCount : false);\n    }\n\n    const fetchAmount = order => {\n        let amount = 0;\n        for(let i in order) {\n            amount = order[i].orderAmount + amount;\n        }\n\n        return amount;\n    }\n\n    \n    const fetchOrderDetails = ( orders ) => {\n        const date = new Date();\n        const month = date.getMonth()+1;\n        const year = date.getFullYear();\n        const day = date.getDate();\t\n        const todayOrder = oneDayOrder(day, month, year, orders) ;\n        const lastMonth = oneMonthOrder( month-1, year, orders) ;\n        const thisMonth = oneMonthOrder( month, year, orders) ;\n        const thisWeek =  oneWeek( day, month, year, orders);\n        // console.log(todayOrder,lastMonth,thisMonth,thisWeek);\n        //console.log('today'+todayOrder);\n        const todayOrderCount = todayOrder.length || 0 ;\n        const lastMonthCount = lastMonth.length || 0;\n        const thisMonthCount = thisMonth.length || 0;\n        const thisWeekCount = thisWeek.length || 0;\n\n        const todayOrderAmount = fetchAmount(todayOrder)\n        const lastMonthAmount = fetchAmount(lastMonth);\n        const thisMonthAmount = fetchAmount(thisMonth);\n        const thisWeekAmount = fetchAmount(thisWeek);\n\n        return {\n            today : {\n                count : todayOrderCount,\n                amount : todayOrderAmount\n            },\n            thisMonth : {\n                count : thisMonthCount,\n                amount : thisMonthAmount\n            },\n            lastMonth : {\n                count : lastMonthCount,\n                amount : lastMonthAmount\n            },\n            thisWeek : {\n                count : thisWeekCount,\n                amount : thisWeekAmount\n            }\n        }\n        \n    }\n\nconst Tile = ( Props ) => {\n\n    console.log('Tile '+ Props.order)\n\n    const classes = useStyles();\n    \n    const orderDetails = fetchOrderDetails( Props.order );\n    //console.log(orderDetails);\n\n\n    return (\n       <Container className={classes.root} >\n           <Grid container spacing={4}>\n                <Grid item sm={3} >\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"h5\" > Week Order Summary</Typography>\n                            <Typography variant=\"subtitle1\" >Today's Order : {orderDetails.today.count}</Typography>\n                            <Typography variant=\"subtitle1\" >Current Week's Order : {orderDetails.thisWeek.count}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid item sm={3} >\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"h5\" > Week Amount Summary</Typography>\n                            <Typography variant=\"subtitle1\" >Today's Amount : {orderDetails.today.amount}</Typography>\n                            <Typography variant=\"subtitle1\" >Current Week's Amount : {orderDetails.thisWeek.amount}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid item sm={3} >\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"h5\" > Month Order Summary</Typography>\n                            <Typography variant=\"subtitle1\" >Current Month's Order : {orderDetails.thisMonth.count}</Typography>\n                            <Typography variant=\"subtitle1\" >Last Month's Order : {orderDetails.lastMonth.count}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid item sm={3} >\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"h5\" > Month Amount Summary</Typography>\n                            <Typography variant=\"subtitle1\" >Current Month's  Amount : {orderDetails.thisMonth.amount}</Typography>\n                            <Typography variant=\"subtitle1\" >Last Month'sAmount : {orderDetails.lastMonth.amount}</Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n           </Grid>\n       </Container>\n    )\n}\n\nexport default Tile;\n","/Users/pooja/Desktop/projects/dashboard/src/component/navbar.js",[],"/Users/pooja/Desktop/projects/dashboard/src/component/data.js",[],"/Users/pooja/Desktop/projects/dashboard/src/component/TopOrders.js",["80"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Paper , Container } from '@material-ui/core';\nimport { pink } from '@material-ui/core/colors';\n\n\n\n\nconst useStyles = makeStyles( (theme) =>( {\n  table: {\n    minWidth: 650,\n  }, \n  Tableroot: {\n    maxWidth: '160vh',\n    minHeight : 'auto',\n    backgroundColor : pink[50],\n    paddingTop : theme.spacing(5),\n    marginBottom : theme.spacing(4)\n  }, \n}));\n\nfunction createData(OrderNo, TotalAmount, TotalQuantity, UserName) {\n  return { OrderNo, TotalAmount, TotalQuantity, UserName};\n}\n\nconst createRow = ( order ) => {\n    const row = [];\n    let k=0;\n    for(let i in order) {\n        if(k>4) {\n            break;\n        }else {\n            k++;\n            row.push( createData(order[i].orderNo, order[i].orderAmount, order[i].orderQuantity, order[i].userName ) )\n        }\n    }\n\n    return row;\n}\n\nconst SortOrders = (task, order) => {\n        if(task == 'a') {\n            order.sort((a,b) => (a.orderAmount > b.orderAmount) ? 1 : ((b.orderAmount > a.orderAmount) ? -1 : 0)); \n        } else {\n            order.sort((a,b) => (a.orderAmount < b.orderAmount) ? 1 : ((b.orderAmount < a.orderAmount) ? -1 : 0)); \n\n        }\n        console.log(order);\n        return order;\n}\n\n\nconst TopOrders = (Props) => {\n  const classes = useStyles();\n\n  const order = Props.order;\n\n  const orders =  SortOrders( Props.task, order) ;\n  const rows = createRow(orders);\n\n\n  return (\n    <Container className={classes.Tableroot} >\n      <div className = \"detail-table\" > {Props.value} five Orders </div>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"right\">Order No</TableCell>\n                <TableCell align=\"right\">Total Amount</TableCell>\n                <TableCell align=\"right\">Total Quantity</TableCell>\n                <TableCell align=\"right\">User Name</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <TableRow key={row.UserName}>\n                  <TableCell align=\"right\">{row.OrderNo}</TableCell>\n                  <TableCell align=\"right\">{row.TotalAmount}</TableCell>\n                  <TableCell align=\"right\">{row.TotalQuantity}</TableCell>\n                  <TableCell align=\"right\">{row.UserName}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n    </Container>\n  );\n}\n\nexport default TopOrders;",["81","82"],"/Users/pooja/Desktop/projects/dashboard/src/component/TopUser.js",["83"],"import {orders} from './data';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Paper , Container } from '@material-ui/core';\nimport { cyan } from '@material-ui/core/colors';\n\n\n\nconst useStyles = makeStyles( (theme) =>( {\n  table: {\n    minWidth: 650,\n  }, \n  Tableroot: {\n    maxWidth: '160vh',\n    minHeight : 'auto',\n    backgroundColor : cyan[50],\n    paddingTop : theme.spacing(5),\n    marginBottom : theme.spacing(4)\n  }, \n}));\n\nconst SortOrders = (task, order) => {\n    if(task == 'a') {\n        order.sort((a,b) => (a.orderAmount > b.orderAmount) ? 1 : ((b.orderAmount > a.orderAmount) ? -1 : 0)); \n    } else {\n        order.sort((a,b) => (a.orderAmount < b.orderAmount) ? 1 : ((b.orderAmount < a.orderAmount) ? -1 : 0)); \n\n    }\n    console.log(order);\n    return order;\n}\n\n\nfunction createData(UserName, TotalAmount, TotalQuantity, City) {\n    return { UserName, TotalAmount, TotalQuantity, City};\n  }\n  \n  const createRow = ( order ) => {\n      const row = [];\n      let k=0;\n      for(let i in order) {\n          if(k>4) {\n              break;\n          }else {\n              k++;\n              row.push( createData(order[i].userName, order[i].orderAmount, order[i].orderQuantity, order[i].city ) )\n          }\n      }\n  \n      return row;\n  }\n\nconst TopUsers = ( Props ) => {\n\n    const classes = useStyles();\n\n    const AllOrders = [...orders.Region1.order, ...orders.Region2.order, ...orders.Region3.order];\n\n    const Orders =  SortOrders( Props.task, AllOrders) ;\n    const rows = createRow(Orders);\n\n\n  return (\n    <Container className={classes.Tableroot} >\n      <div className = \"detail-table\" > {Props.value} Five Users</div>\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">User Name</TableCell>\n            <TableCell align=\"right\">Total Amount</TableCell>\n            <TableCell align=\"right\">Total Quantity</TableCell>\n            <TableCell align=\"right\">City</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.UserName}>\n              <TableCell align=\"right\">{row.UserName}</TableCell>\n              <TableCell align=\"right\">{row.TotalAmount}</TableCell>\n              <TableCell align=\"right\">{row.TotalQuantity}</TableCell>\n              <TableCell align=\"right\">{row.City}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    </Container>\n  );\n}\n\n\nexport default TopUsers;","/Users/pooja/Desktop/projects/dashboard/src/component/DetailReport.js",[],"/Users/pooja/Desktop/projects/dashboard/src/component/footer.js",[],["84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":26,"column":32,"nodeType":"92","messageId":"93","endLine":26,"endColumn":34},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":12},{"ruleId":"86","replacedBy":"100"},{"ruleId":"88","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":27,"column":9,"nodeType":"98","messageId":"104","endLine":27,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":32,"column":31,"nodeType":"92","messageId":"93","endLine":32,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":32,"column":109,"nodeType":"92","messageId":"93","endLine":32,"endColumn":111},{"ruleId":"90","severity":1,"message":"91","line":22,"column":33,"nodeType":"92","messageId":"93","endLine":22,"endColumn":35},{"ruleId":"90","severity":1,"message":"91","line":22,"column":56,"nodeType":"92","messageId":"93","endLine":22,"endColumn":58},{"ruleId":"90","severity":1,"message":"91","line":22,"column":81,"nodeType":"92","messageId":"93","endLine":22,"endColumn":83},{"ruleId":"90","severity":1,"message":"91","line":34,"column":33,"nodeType":"92","messageId":"93","endLine":34,"endColumn":35},{"ruleId":"90","severity":1,"message":"91","line":34,"column":58,"nodeType":"92","messageId":"93","endLine":34,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":47,"column":13,"nodeType":"98","messageId":"104","endLine":47,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":52,"column":35,"nodeType":"92","messageId":"93","endLine":52,"endColumn":37},{"ruleId":"90","severity":1,"message":"91","line":52,"column":113,"nodeType":"92","messageId":"93","endLine":52,"endColumn":115},{"ruleId":"90","severity":1,"message":"91","line":48,"column":17,"nodeType":"92","messageId":"93","endLine":48,"endColumn":19},{"ruleId":"86","replacedBy":"105"},{"ruleId":"88","replacedBy":"106"},{"ruleId":"90","severity":1,"message":"91","line":29,"column":13,"nodeType":"92","messageId":"93","endLine":29,"endColumn":15},{"ruleId":"86","replacedBy":"107"},{"ruleId":"88","replacedBy":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["109"],["110"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["109"],["110"],"no-const-assign","'enddate' is constant.","const",["109"],["110"],["109"],["110"],"no-global-assign","no-unsafe-negation"]